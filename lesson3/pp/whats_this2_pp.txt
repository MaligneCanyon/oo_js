1.
let myObject = {
  count: 1,
  myChildObject: {
    myMethod() {
      return this.count;
    },
  },
};

myObject.myChildObject.myMethod();
// 'this' points to the owning object myChildObject
// the method rtns myChildObject.count, which is undefined

2.
let myObject = {
  count: 1,
  myChildObject: {
    myMethod() {
      //return myObject.count; // *** cheating ...
      return this.count;
    }
  },
};

//myObject.myChildObject.myMethod();
myObject.myChildObject.myMethod.call(myObject); // ***; provide an explicit exec context

3.
let person = {
  firstName: 'Peter',
  lastName: 'Parker',
  fullName() {
    console.log(this.firstName + ' ' + this.lastName +
                ' is the Amazing Spiderman!');
  },
};

let whoIsSpiderman = person.fullName.bind(person);
whoIsSpiderman();
// although whoIsSpiderman is invoked as a fn, it points to the new fn rtn'd
// by bind (which is bound to the person obj);
// so the code logs 'Peter Parker is the ASS' (or something like that)

4.
let computer = {
  price: 30000,
  shipping: 2000,
  total() {
    let tax = 3000;
    function specialDiscount() {
      if (this.price > 20000) {
        return 1000;
      } else {
        return 0;
      }
    }

    //return this.price + this.shipping + tax - specialDiscount(); // rtns 35000
    return this.price + this.shipping + tax - specialDiscount.call(this); // *** rtns 34000
  }
};

console.log(computer.total()); // 35000
// the inner fn specialDiscount is called w/o an explicit context, so its exec
// context is the global obj;
// so this.price is undefined;
// so specialDiscount rtns 0;
// so total rtns 35000
