1.
let turk = {
  firstName: 'Christopher',
  lastName: 'Turk',
  occupation: 'Surgeon',
  getDescription() {
    return this.firstName + ' ' + this.lastName + ' is a ' + this.occupation + '.';
  }
};

function logReturnVal(func) {
  let returnVal = func();
  console.log(returnVal);
}

logReturnVal(turk.getDescription);

// turk.getDescription is called as a fn, outside its containing obj;
// so 'this' refs the global obj, not 'turk';
// so the output will be
// => undefined undefined is a undefined.

2.
let turk = {
  firstName: 'Christopher',
  lastName: 'Turk',
  occupation: 'Surgeon',
  getDescription() {
    return this.firstName + ' ' + this.lastName + ' is a ' + this.occupation + '.';
  }
};

function logReturnVal(func, context) {
  let returnVal = func.call(context); // ***
  // let returnVal = func.bind(context)(); // *** this works too ...
  console.log(returnVal);
}

logReturnVal(turk.getDescription, turk);

3.
let turk = {
  firstName: 'Christopher',
  lastName: 'Turk',
  occupation: 'Surgeon',
  getDescription() {
    return this.firstName + ' ' + this.lastName + ' is a ' + this.occupation + '.';
  }
};

function logReturnVal(func) {
  let returnVal = func();
  console.log(returnVal);
}

let getTurkDescription = turk.getDescription.bind(turk); // ***
logReturnVal(getTurkDescription); // ***

4.
let TESgames = {
  titles: ['Arena', 'Daggerfall', 'Morrowind', 'Oblivion', 'Skyrim'],
  seriesTitle: 'The Elder Scrolls',
  listGames() {
    this.titles.forEach(function(title) {
      console.log(this.seriesTitle + ' ' + title); // no explicit exec context
    });
  }
};

TESgames.listGames(); // => undefined Arena (etc)
// the forEach cb has no explicit exec context;
// so 'this' refs the global obj in this.seriesTitle

5.
let TESgames = {
  titles: ['Arena', 'Daggerfall', 'Morrowind', 'Oblivion', 'Skyrim'],
  seriesTitle: 'The Elder Scrolls',
  listGames() {
    // this.titles.forEach(function(title) {
    this.titles.forEach(title => { // ***
      console.log(this.seriesTitle + ' ' + title); // exec context resolves to the immed surrounding scope, i.e. TESgames
    });
  }
};

TESgames.listGames();

6.
let TESgames = {
  titles: ['Arena', 'Daggerfall', 'Morrowind', 'Oblivion', 'Skyrim'],
  seriesTitle: 'The Elder Scrolls',
  listGames() {
    let self = this; // ***
    this.titles.forEach(function(title) {
      console.log(self.seriesTitle + ' ' + title); // ***
    });
  }
};

TESgames.listGames();

7.
let TESgames = {
  titles: ['Arena', 'Daggerfall', 'Morrowind', 'Oblivion', 'Skyrim'],
  seriesTitle: 'The Elder Scrolls',
  listGames() {
    this.titles.forEach(function(title) {
      console.log(this.seriesTitle + ' ' + title);
    }, this); // ***
  }
};

TESgames.listGames();

8.
let foo = {
  a: 0,
  incrementA() {
    function increment() {
      this.a += 1; // internal fn w/ lost exec context
    }

    increment();
  }
};

foo.incrementA();
foo.incrementA();
foo.incrementA();
console.log(foo.a); // => 0

9.
let foo = {
  a: 0,
  incrementA() {
    function increment() {
      this.a += 1;
    }

    increment.call(this); // ***
  }
};

foo.incrementA();
foo.incrementA();
foo.incrementA();
console.log(foo.a); // => 3

10.
let foo = {
  a: 0,
  incrementA() {
    let increment = function () { // *** must use a fn expr
      this.a += 1;
    }.bind(foo); // *** bind the fn to foo
    // }.bind(this); // *** 'this' already refs foo, so this works too ...

    increment();
    increment();
    increment();
  }
};

foo.incrementA();
console.log(foo.a); // => 3